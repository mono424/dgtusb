import 'dart:typed_data';

import 'package:dgtusb/dgtdecode.dart';
import 'package:dgtusb/protocol/ClockAnswerType.dart';
import 'package:dgtusb/protocol/ClockButton.dart';
import 'package:dgtusb/protocol/Answer.dart';

class AnswerClock<T> extends Answer<T> {
  int code = 0x2b;

  ClockAnswerType type;
  bool error, autoGenerated, ready;
  ClockButton pressedButton;
  String version; /* only set on version type */

  T clockProcess() {
    return null;
  }

  T process(Uint8List msg) {
    if (msg.length != 7) throw new DGTMessageToShortException();

    int msg0 = ((msg[1] & 0x7f) | ((msg[3] << 3) & 0x80));
    int msg1 = ((msg[2] & 0x7f) | ((msg[3] << 2) & 0x80));
    int msg2 = ((msg[4] & 0x7f) | ((msg[0] << 3) & 0x80));
    int msg3 = ((msg[5] & 0x7f) | ((msg[0] << 2) & 0x80));

    // SET FLAGS
    error = msg0 == 0x40;
    autoGenerated = (msg1 & 0x80) == 0x80;
    ready = msg1 == 0x81;

    // ANSWER TYPE
    switch(msg3) {
        case 0x31: type = ClockAnswerType.display; break;
        case 0x32: type = ClockAnswerType.button; break;
        case 0x33: 
          type = ClockAnswerType.version;
          version = (msg2 >> 4).toString() + '.' + (msg2 & 0x0f).toString();
          break;
        case 0x34: type = ClockAnswerType.setNRun; break;
        case 0x35: type = ClockAnswerType.beep; break;
    }

    // BUTTON STATE
    switch(msg3) {
        case 0x31: pressedButton = ClockButton.back; break;
        case 0x32: pressedButton = ClockButton.plus; break;
        case 0x33: pressedButton = ClockButton.run; break;
        case 0x34: pressedButton = ClockButton.minus; break;
        case 0x35: pressedButton = ClockButton.ok; break;
    }
    return clockProcess();
  }
}